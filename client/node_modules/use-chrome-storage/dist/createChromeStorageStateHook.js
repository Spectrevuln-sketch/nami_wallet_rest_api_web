import{useState as e,useEffect as t,useCallback as n}from"react";function o(o,r,c){const s=[];return function(){const[i,u,a,f]=function(o,r,c){const[s]=e(()=>"function"==typeof r?r():r),[i]=e(c),[u,a]=e(s),[f,h]=e(!0),[m,d]=e("");t(()=>{((e,t,n)=>{const o=void 0===t?e:{[e]:t};return new Promise((t,r)=>{chrome.storage[n].get(o,n=>{const o=chrome.runtime.lastError;if(o)return r(o);t(n[e])})})})(o,s,i).then(e=>{a(e),h(!0),d("")}).catch(e=>{h(!1),d(e)})},[o,s,i]);const g=n(e=>{const t="function"==typeof e?e(u):e;a(t),((e,t,n)=>new Promise((o,r)=>{chrome.storage[n].set({[e]:t},()=>{const e=chrome.runtime.lastError;e?r(e):o()})}))(o,t,i).then(()=>{h(!0),d("")}).catch(e=>{h(!1),d(e)})},[i,o,u]);return t(()=>{const e=(e,t)=>{t===i&&o in e&&(a(e[o].newValue),h(!0),d(""))};return chrome.storage.onChanged.addListener(e),()=>{chrome.storage.onChanged.removeListener(e)}},[o,i]),[u,g,f,m]}(o,r,c),h=n(e=>{for(const t of s)t(e)},[]);return t(()=>(s.push(u),()=>{s.splice(s.indexOf(u),1)}),[u]),[i,h,a,f]}}export default o;
//# sourceMappingURL=createChromeStorageStateHook.js.map
